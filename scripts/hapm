#!/usr/bin/env python
from argparse import BooleanOptionalAction

from arrrgs import arg, command, global_args, no_command, run

from libhapm.cli import report_diff, report_summary
from libhapm.manager import PackageManager
from libhapm.manifest import Manifest

STORAGE_DIR = ".hapm"
MANIFEST_PATH = "hapm.yaml"

global_args(
    arg('--manifest', '-m', default=MANIFEST_PATH, help="Manifest path"),
    arg('--storage', '-s', default=STORAGE_DIR, help="Storage location"),
    arg('--dry', '-d',
        default=BooleanOptionalAction,
        help="Only write information. Do not make any changes to the files")
)


@no_command()
def sync(args, store: PackageManager):
    """Synchronizes local versions of components with the manifest."""
    manifest = Manifest(args.manifest)
    manifest.load()
    diff = store.diff(manifest.values)
    report_diff(diff)
    if args.dry is True:
        exit(0)
    store.apply(diff)
    report_summary(diff)


@command(
    arg('--type', '-t', required=True, default=None, help="Package type"),
    arg('path', default=None, help="Output path")
)
def put(args, store: PackageManager):
    """Synchronizes local versions of components with the manifest."""
    store.export(args.type, args.path)


@command()
def updates(args, store: PackageManager):
    """Prints available packages updates."""
    print(store.updates())
    # if args.dry is True:
    #     exit(0)


@command(name="list")
def list_packages(_, store: PackageManager):
    """Print current version of components."""
    for d in store.descriptions():
        url, version, kind = d["url"], d["version"], d["kind"]
        print(f"{kind} {url}@{version}")


def prepare(args):
    """Creates HAPM context"""
    return args, PackageManager(args.storage)


if __name__ == "__main__":
    run(prepare=prepare)
